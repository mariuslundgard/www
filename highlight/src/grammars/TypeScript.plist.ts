// prettier-ignore
export const TypeScript_plist = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>name</key>\n    <string>TypeScript</string>\n    <key>scopeName</key>\n    <string>source.ts</string>\n    <key>fileTypes</key>\n    <array>\n      <string>ts</string>\n    </array>\n    <key>uuid</key>\n    <string>ef98eb90-bf9b-11e4-bb52-0800200c9a66</string>\n    <key>patterns</key>\n    <array>\n      <dict>\n        <key>include</key>\n        <string>#directives</string>\n      </dict>\n      <dict>\n        <key>include</key>\n        <string>#statements</string>\n      </dict>\n      <dict>\n        <key>include</key>\n        <string>#shebang</string>\n      </dict>\n    </array>\n    <key>repository</key>\n    <dict>\n      <key>shebang</key>\n      <dict>\n        <key>name</key>\n        <string>comment.line.shebang.ts</string>\n        <key>match</key>\n        <string>\\A(#!).*(?=$)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.comment.ts</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>statements</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#control-statement</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#after-operator-block-as-object-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#label</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-semicolon</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n        </array>\n      </dict>\n      <key>declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#var-expr</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#interface-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#enum-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#namespace-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-alias-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-equals-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#export-declaration</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>control-statement</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#switch-statement</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#for-loop</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.trycatch.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.loop.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.loop.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.flow.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.switch.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#if-statement</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.conditional.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.with.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.other.debugger.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>label</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.label.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#decl-block</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.label.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>expression</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expressionWithoutIdentifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#identifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionPunctuations</string>\n          </dict>\n        </array>\n      </dict>\n      <key>expressionWithoutIdentifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#arrow-function</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#paren-expression-possibly-arrow</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#cast</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#ternary-expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#new-expr</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#instanceof-expr</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expression-operators</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-call</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#support-objects</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#paren-expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>expressionPunctuations</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-accessor</string>\n          </dict>\n        </array>\n      </dict>\n      <key>decorator</key>\n      <dict>\n        <key>name</key>\n        <string>meta.decorator.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))\\@</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.decorator.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\s)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>var-expr</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.var.expr.ts</string>\n            <key>begin</key>\n            <string>(?=(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))</string>\n            <key>end</key>\n            <string>(?!(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|((?&lt;!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.control.export.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.ts</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.type.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?=\\S)</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#destructuring-variable</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#variable-initializer</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(,)\\s*((?!\\S)|(?=\\/\\/))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.separator.comma.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?&lt;!,)(((?==|;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+)|^\\s*$))|((?&lt;=\\S)(?=\\s*$)))</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#single-line-comment-consuming-line-ending</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#comment</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#destructuring-variable</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#var-single-variable</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#punctuation-comma</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.var.expr.ts</string>\n            <key>begin</key>\n            <string>(?=(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?!(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|((?&lt;!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.control.export.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.ts</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.type.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?=\\S)</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#destructuring-const</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#var-single-const</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#variable-initializer</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(,)\\s*((?!\\S)|(?=\\/\\/))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.separator.comma.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?&lt;!,)(((?==|;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+)|^\\s*$))|((?&lt;=\\S)(?=\\s*$)))</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#single-line-comment-consuming-line-ending</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#comment</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#destructuring-const</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#var-single-const</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#punctuation-comma</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>var-single-variable</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.ts</string>\n            <key>begin</key>\n            <string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.ts entity.name.function.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.definiteassignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.ts</string>\n            <key>begin</key>\n            <string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.ts variable.other.constant.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.definiteassignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.ts</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)(\\!)?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.ts variable.other.readwrite.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.definiteassignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>var-single-const</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.ts</string>\n            <key>begin</key>\n            <string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.ts variable.other.constant.ts entity.name.function.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.var-single-variable.expr.ts</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.variable.ts variable.other.constant.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-single-variable-type-annotation</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>var-single-variable-type-annotation</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-variable</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.object-binding-pattern-variable.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)</string>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-pattern</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.array-binding-pattern-variable.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)</string>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#array-binding-pattern</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-const</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.object-binding-pattern-variable.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)</string>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-pattern-const</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.array-binding-pattern-variable.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)</string>\n            <key>end</key>\n            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#array-binding-pattern-const</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-annotation</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>object-binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?=((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-element-propertyName</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#binding-element</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-binding-element-const</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?=((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-element-propertyName</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#binding-element-const</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-pattern-const</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable-rest-const</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-binding-element-propertyName</key>\n      <dict>\n        <key>begin</key>\n        <string>(?x)(?=((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n        <key>end</key>\n        <string>(:)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.destructuring.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.object.property.ts</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n          </dict>\n        </array>\n      </dict>\n      <key>binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n        </array>\n      </dict>\n      <key>binding-element-const</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-pattern-const</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-binding-pattern-const</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-variable-rest-const</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-variable-rest</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.variable.ts variable.other.readwrite.ts</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>destructuring-variable-rest-const</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.variable.ts variable.other.constant.ts</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>object-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-element</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-binding-pattern-const</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-binding-element-const</string>\n          </dict>\n        </array>\n      </dict>\n      <key>array-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#binding-element</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>array-binding-pattern-const</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#binding-element-const</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-name</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts variable.language.this.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts variable.language.this.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-parameter</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.parameter.object-binding-pattern.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.object.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\}</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.object.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#parameter-object-binding-element</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.paramter.array-binding-pattern.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.array.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\]</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.binding-pattern.array.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#parameter-binding-element</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-object-binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?=((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))</string>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#object-binding-element-propertyName</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#parameter-binding-element</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-binding-element</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-object-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-array-binding-pattern</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter-rest</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n        </array>\n      </dict>\n      <key>destructuring-parameter-rest</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>variable.parameter.ts</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>parameter-object-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.object.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#parameter-object-binding-element</string>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-array-binding-pattern</key>\n      <dict>\n        <key>begin</key>\n        <string>(?:(\\.\\.\\.)\\s*)?(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.binding-pattern.array.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#parameter-binding-element</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>field-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.field.declaration.ts</string>\n        <key>begin</key>\n        <string>(?x)(?&lt;!\\()(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(readonly)\\s+)?(?=\\s*((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.definition.property.ts entity.name.function.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.definiteassignment.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.property.ts variable.object.property.ts</string>\n            <key>match</key>\n            <string>\\#?[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.ts</string>\n            <key>match</key>\n            <string>\\?</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.definiteassignment.ts</string>\n            <key>match</key>\n            <string>\\!</string>\n          </dict>\n        </array>\n      </dict>\n      <key>variable-initializer</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=&gt;\\s*$)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|^|[,);}\\]]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;!=|!)(=)(?!=)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=[,);}\\]]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(of|in)\\s+))|(?=^\\s*$)|(?&lt;=\\S)(?&lt;!=)(?=\\s*$)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>function-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.function.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?&lt;=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.async.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.function.ts</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.ts</string>\n          </dict>\n          <key>6</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.function.ts entity.name.function.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#function-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-expression</key>\n      <dict>\n        <key>name</key>\n        <string>meta.function.expression.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?&lt;=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.async.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.function.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.function.ts entity.name.function.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=;)|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#function-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#single-line-comment-consuming-line-ending</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-name</key>\n      <dict>\n        <key>name</key>\n        <string>meta.definition.function.ts entity.name.function.ts</string>\n        <key>match</key>\n        <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n      </dict>\n      <key>function-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#return-type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-function-return-type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.ts</string>\n            <key>match</key>\n            <string>\\*</string>\n          </dict>\n        </array>\n      </dict>\n      <key>method-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.ts</string>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.ts</string>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*))?[\\(])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.new.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.ts</string>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*))?[\\(])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.property.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>object-literal-method-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.method.declaration.ts</string>\n        <key>begin</key>\n        <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*))?[\\(])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.async.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.property.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.generator.asterisk.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\}|;|,)|(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#method-declaration-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#function-body</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*))?[\\(])</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.property.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\(|\\&lt;)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#method-declaration-name</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>method-declaration-name</key>\n      <dict>\n        <key>begin</key>\n        <string>(?x)(?=((\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\&lt;])</string>\n        <key>end</key>\n        <string>(?=\\(|\\&lt;)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.definition.method.ts entity.name.function.ts</string>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.ts</string>\n            <key>match</key>\n            <string>\\?</string>\n          </dict>\n        </array>\n      </dict>\n      <key>arrow-function</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.ts</string>\n            <key>match</key>\n            <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==&gt;)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.ts</string>\n            <key>begin</key>\n            <string>(?x) (?:\n  (?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(\\basync)\n)? ((?&lt;![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  )\n)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?==&gt;|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-parameters</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-parameters</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#arrow-return-type</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#possibly-arrow-return-type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.ts</string>\n            <key>begin</key>\n            <string>=&gt;</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.function.arrow.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>((?&lt;=\\}|\\S)(?&lt;!=&gt;)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#single-line-comment-consuming-line-ending</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#decl-block</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>indexer-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.indexer.declaration.ts</string>\n        <key>begin</key>\n        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>variable.parameter.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\\])\\s*(\\?\\s*)?|$</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n        </array>\n      </dict>\n      <key>indexer-mapped-type-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.indexer.mappedtype.declaration.ts</string>\n        <key>begin</key>\n        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.modifier.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.ts</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.in.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\\])([+-])?\\s*(\\?\\s*)?|$</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.optional.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-parameters</key>\n      <dict>\n        <key>name</key>\n        <string>meta.parameters.ts</string>\n        <key>begin</key>\n        <string>\\(</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.parameters.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.parameters.end.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#function-parameters-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-parameters-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-name</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#parameter-type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.parameter.ts</string>\n            <key>match</key>\n            <string>,</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.class.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.class.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration-or-expression-patterns</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-expression</key>\n      <dict>\n        <key>name</key>\n        <string>meta.class.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[&lt;{]|\\/[\\/*])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.class.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#class-declaration-or-expression-patterns</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-declaration-or-expression-patterns</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-heritage</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.class.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>interface-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.interface.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.interface.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-heritage</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.interface.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-or-interface-heritage</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\{)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#class-or-interface-heritage</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionWithoutIdentifiers</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.other.inherited-class.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionPunctuations</string>\n          </dict>\n        </array>\n      </dict>\n      <key>class-or-interface-body</key>\n      <dict>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=:)\\s*</string>\n            <key>end</key>\n            <string>(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#method-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#indexer-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#field-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#access-modifier</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#property-accessor</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#async-modifier</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#after-operator-block-as-object-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-semicolon</string>\n          </dict>\n        </array>\n      </dict>\n      <key>access-modifier</key>\n      <dict>\n        <key>name</key>\n        <string>storage.modifier.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>property-accessor</key>\n      <dict>\n        <key>name</key>\n        <string>storage.type.property.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>async-modifier</key>\n      <dict>\n        <key>name</key>\n        <string>storage.modifier.async.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>enum-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.enum.declaration.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.enum.ts</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.enum.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\{</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\}</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>variable.other.enummember.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?=,|\\}|$)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#comment</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#variable-initializer</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))</string>\n                <key>end</key>\n                <string>(?=,|\\}|$)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#string</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#array-literal</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#comment</string>\n                  </dict>\n                  <dict>\n                    <key>include</key>\n                    <string>#variable-initializer</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-comma</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>namespace-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.namespace.declaration.ts</string>\n        <key>begin</key>\n        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.namespace.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.module.ts</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-accessor</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decl-block</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-alias-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.declaration.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.type.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.alias.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.intrinsic.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(=)\\s*</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>import-equals-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.import-equals.external.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.import.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.type.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n              <key>7</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.require.ts</string>\n              </dict>\n              <key>8</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.import-equals.internal.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.import.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.type.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=;|$|^)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#single-line-comment-consuming-line-ending</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.type.module.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.accessor.ts</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.accessor.optional.ts</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.ts</string>\n                <key>match</key>\n                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>import-declaration</key>\n      <dict>\n        <key>name</key>\n        <string>meta.import.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.export.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.import.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.type.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;!^import|[^\\._$[:alnum:]]import)(?=;|$|^)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#single-line-comment-consuming-line-ending</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=^import|[^\\._$[:alnum:]]import)(?!\\s*[\"'])</string>\n            <key>end</key>\n            <string>\\bfrom\\b</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.from.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#import-export-declaration</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-export-declaration</string>\n          </dict>\n        </array>\n      </dict>\n      <key>export-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.namespace.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.export.default.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.type.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.default.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#interface-declaration</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.export.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b)))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.export.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.type.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#import-export-declaration</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>import-export-declaration</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-export-block</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.from.ts</string>\n            <key>match</key>\n            <string>\\bfrom\\b</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#import-export-clause</string>\n          </dict>\n        </array>\n      </dict>\n      <key>import-export-block</key>\n      <dict>\n        <key>name</key>\n        <string>meta.block.ts</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#import-export-clause</string>\n          </dict>\n        </array>\n      </dict>\n      <key>import-export-clause</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(?:(\\btype)\\s+)?(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.type.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.default.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>constant.language.import-export-all.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.default.ts</string>\n              </dict>\n              <key>7</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.language.import-export-all.ts</string>\n            <key>match</key>\n            <string>\\*</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.default.ts</string>\n            <key>match</key>\n            <string>\\b(default)\\b</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?:(\\btype)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.type.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.alias.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>switch-statement</key>\n      <dict>\n        <key>name</key>\n        <string>switch-statement.expr.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?=\\bswitch\\s*\\()</string>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>switch-expression.expr.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(switch)\\s*(\\()</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.switch.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>switch-block.expr.ts</string>\n            <key>begin</key>\n            <string>\\{</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>case-clause.expr.ts</string>\n                <key>begin</key>\n                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.control.switch.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?=:)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#expression</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(:)\\s*(\\{)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>case-clause.expr.ts punctuation.definition.section.case-statement.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.block.ts punctuation.definition.block.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>\\}</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.block.ts punctuation.definition.block.ts</string>\n                  </dict>\n                </dict>\n                <key>contentName</key>\n                <string>meta.block.ts</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#statements</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>(:)</string>\n                <key>captures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>case-clause.expr.ts punctuation.definition.section.case-statement.ts</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#statements</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>for-loop</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.loop.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.loop.ts</string>\n            <key>match</key>\n            <string>await</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\(</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#var-expr</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#punctuation-semicolon</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>if-statement</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))</string>\n            <key>end</key>\n            <string>(?=;|$|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(if)\\s*(\\()</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.control.conditional.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>\\)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.ts</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#expression</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>string.regexp.ts</string>\n                <key>begin</key>\n                <string>(?&lt;=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.string.begin.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(/)([dgimsuy]*)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.string.end.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.other.ts</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#regexp</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#statements</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>decl-block</key>\n      <dict>\n        <key>name</key>\n        <string>meta.block.ts</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#statements</string>\n          </dict>\n        </array>\n      </dict>\n      <key>after-operator-block-as-object-literal</key>\n      <dict>\n        <key>name</key>\n        <string>meta.objectliteral.ts</string>\n        <key>begin</key>\n        <string>(?&lt;!\\+\\+|--)(?&lt;=[:=(,\\[?+!&gt;]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&amp;&amp;|\\|\\||\\*)\\s*(\\{)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-member</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-literal</key>\n      <dict>\n        <key>name</key>\n        <string>meta.objectliteral.ts</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-member</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-member</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-literal-method-declaration</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts meta.object-literal.key.ts</string>\n            <key>begin</key>\n            <string>(?=\\[)</string>\n            <key>end</key>\n            <string>(?=:)|((?&lt;=[\\]])(?=\\s*[\\(\\&lt;]))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#array-literal</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts meta.object-literal.key.ts</string>\n            <key>begin</key>\n            <string>(?=[\\'\\\"\\`])</string>\n            <key>end</key>\n            <string>(?=:)|((?&lt;=[\\'\\\"\\`])(?=((\\s*[\\(\\&lt;,}])|(\\s+(as)\\s+))))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts meta.object-literal.key.ts</string>\n            <key>begin</key>\n            <string>(?x)(?=(\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)))</string>\n            <key>end</key>\n            <string>(?=:)|(?=\\s*([\\(\\&lt;,}])|(\\s+as\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#numeric-literal</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.method.declaration.ts</string>\n            <key>begin</key>\n            <string>(?&lt;=[\\]\\'\\\"\\`])(?=\\s*[\\(\\&lt;])</string>\n            <key>end</key>\n            <string>(?=\\}|;|,)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#function-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>match</key>\n            <string>(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.ts</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>constant.numeric.decimal.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>match</key>\n            <string>(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.ts</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>match</key>\n            <string>(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>begin</key>\n            <string>\\.\\.\\.</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.spread.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.readwrite.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+(const)(?=\\s*([,}]|$))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=[;),}\\]:?\\-\\+\\&gt;]|\\|\\||\\&amp;\\&amp;|\\!\\=\\=|$|^|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>begin</key>\n            <string>(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)</string>\n            <key>end</key>\n            <string>(?=,|\\}|$|\\/\\/|\\/\\*)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.object.member.ts</string>\n            <key>begin</key>\n            <string>:</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.object-literal.key.ts punctuation.separator.key-value.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=,|\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;=:)\\s*(async)?(?=\\s*(&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.async.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?&lt;=\\))</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#type-parameters</string>\n                  </dict>\n                  <dict>\n                    <key>begin</key>\n                    <string>\\(</string>\n                    <key>beginCaptures</key>\n                    <dict>\n                      <key>0</key>\n                      <dict>\n                        <key>name</key>\n                        <string>meta.brace.round.ts</string>\n                      </dict>\n                    </dict>\n                    <key>end</key>\n                    <string>\\)</string>\n                    <key>endCaptures</key>\n                    <dict>\n                      <key>0</key>\n                      <dict>\n                        <key>name</key>\n                        <string>meta.brace.round.ts</string>\n                      </dict>\n                    </dict>\n                    <key>patterns</key>\n                    <array>\n                      <dict>\n                        <key>include</key>\n                        <string>#expression-inside-possibly-arrow-parens</string>\n                      </dict>\n                    </array>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.async.ts</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>\\)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.ts</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#expression-inside-possibly-arrow-parens</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;=:)\\s*(async)?\\s*(?=\\&lt;\\s*$)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>storage.modifier.async.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(?&lt;=\\&gt;)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#type-parameters</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>begin</key>\n                <string>(?&lt;=\\&gt;)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>\\)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>meta.brace.round.ts</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#expression-inside-possibly-arrow-parens</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#possibly-arrow-return-type</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>ternary-expression</key>\n      <dict>\n        <key>begin</key>\n        <string>(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.ternary.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\s*(:)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.ternary.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-call</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))(([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;)*(?&lt;!=)\\&gt;))*(?&lt;!=)\\&gt;)*(?&lt;!=)&gt;\\s*)?\\())</string>\n            <key>end</key>\n            <string>(?&lt;=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))(([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;)*(?&lt;!=)\\&gt;))*(?&lt;!=)\\&gt;)*(?&lt;!=)&gt;\\s*)?\\())</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>meta.function-call.ts</string>\n                <key>begin</key>\n                <string>(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))</string>\n                <key>end</key>\n                <string>(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))(([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;)*(?&lt;!=)\\&gt;))*(?&lt;!=)\\&gt;)*(?&lt;!=)&gt;\\s*)?\\())</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#function-call-target</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-call-optionals</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#paren-expression</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\\)]))(&lt;\\s*[\\{\\[\\(]\\s*$))</string>\n            <key>end</key>\n            <string>(?&lt;=\\&gt;)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\\)]))(&lt;\\s*[\\{\\[\\(]\\s*$))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>meta.function-call.ts</string>\n                <key>begin</key>\n                <string>(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))</string>\n                <key>end</key>\n                <string>(?=(&lt;\\s*[\\{\\[\\(]\\s*$))</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#function-call-target</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#function-call-optionals</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>function-call-target</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#support-function-call-identifiers</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.function.ts</string>\n            <key>match</key>\n            <string>(\\#?[_$[:alpha:]][_$[:alnum:]]*)</string>\n          </dict>\n        </array>\n      </dict>\n      <key>function-call-optionals</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.function-call.ts punctuation.accessor.optional.ts</string>\n            <key>match</key>\n            <string>\\?\\.</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.function-call.ts keyword.operator.definiteassignment.ts</string>\n            <key>match</key>\n            <string>\\!</string>\n          </dict>\n        </array>\n      </dict>\n      <key>support-function-call-identifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#support-objects</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#object-identifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-accessor</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.import.ts</string>\n            <key>match</key>\n            <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>new-expr</key>\n      <dict>\n        <key>name</key>\n        <string>new.expr.ts</string>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.new.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\))|(?=[;),}\\]:?\\-\\+\\&gt;]|\\|\\||\\&amp;\\&amp;|\\!\\=\\=|$|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>instanceof-expr</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.instanceof.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?&lt;=\\))|(?=[;),}\\]:?\\-\\+\\&gt;]|\\|\\||\\&amp;\\&amp;|\\!\\=\\=|$|(([\\&amp;\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>paren-expression-possibly-arrow</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[(=,])\\s*(async)?(?=\\s*((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#paren-expression-possibly-arrow-with-typeparameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[(=,]|=&gt;|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*))?\\()|(&lt;))\\s*$)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.async.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#paren-expression-possibly-arrow-with-typeparameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#possibly-arrow-return-type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>paren-expression-possibly-arrow-with-typeparameters</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\(</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.round.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#expression-inside-possibly-arrow-parens</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>expression-inside-possibly-arrow-parens</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expressionWithoutIdentifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#decorator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#destructuring-parameter</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;\n(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=&gt;|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n)))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts variable.language.this.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts variable.language.this.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#variable-initializer</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.parameter.ts</string>\n            <key>match</key>\n            <string>,</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#identifiers</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#expressionPunctuations</string>\n          </dict>\n        </array>\n      </dict>\n      <key>paren-expression</key>\n      <dict>\n        <key>begin</key>\n        <string>\\(</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>cast</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>cast.expr.ts</string>\n            <key>match</key>\n            <string>\\s*(&lt;)\\s*(const)\\s*(&gt;)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.angle.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.angle.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>cast.expr.ts</string>\n            <key>begin</key>\n            <string>(?:(?&lt;!\\+\\+|--)(?&lt;=^return|[^\\._$[:alnum:]]return|^throw|[^\\._$[:alnum:]]throw|^yield|[^\\._$[:alnum:]]yield|^await|[^\\._$[:alnum:]]await|^default|[^\\._$[:alnum:]]default|[=(,:&gt;*?\\&amp;\\|\\^]|[^_$[:alnum:]](?:\\+\\+|\\-\\-)|[^\\+]\\+|[^\\-]\\-))\\s*(&lt;)(?!&lt;?\\=)(?!\\s*$)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.angle.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\&gt;)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.angle.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>cast.expr.ts</string>\n            <key>begin</key>\n            <string>(?:(?&lt;=^))\\s*(&lt;)(?=[_$[:alpha:]][_$[:alnum:]]*\\s*&gt;)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.angle.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\&gt;)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.brace.angle.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>expression-operators</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.flow.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.flow.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\*</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.flow.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.generator.asterisk.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.delete.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.in.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.of.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.instanceof.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.new.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#typeof-operator</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.void.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.as.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=^|[;),}\\]:?\\-\\+\\&gt;]|\\|\\||\\&amp;\\&amp;|\\!\\=\\=|$|((?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(as)\\s+)|(\\s+\\&lt;))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.spread.ts</string>\n            <key>match</key>\n            <string>\\.\\.\\.</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.compound.ts</string>\n            <key>match</key>\n            <string>\\*=|(?&lt;!\\()/=|%=|\\+=|\\-=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.compound.bitwise.ts</string>\n            <key>match</key>\n            <string>\\&amp;=|\\^=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\\|=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.bitwise.shift.ts</string>\n            <key>match</key>\n            <string>&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.comparison.ts</string>\n            <key>match</key>\n            <string>===|!==|==|!=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.relational.ts</string>\n            <key>match</key>\n            <string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.logical.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.compound.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.arithmetic.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.logical.ts</string>\n            <key>match</key>\n            <string>\\!|&amp;&amp;|\\|\\||\\?\\?</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.bitwise.ts</string>\n            <key>match</key>\n            <string>\\&amp;|~|\\^|\\|</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.ts</string>\n            <key>match</key>\n            <string>\\=</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.decrement.ts</string>\n            <key>match</key>\n            <string>--</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.increment.ts</string>\n            <key>match</key>\n            <string>\\+\\+</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.arithmetic.ts</string>\n            <key>match</key>\n            <string>%|\\*|/|-|\\+</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))</string>\n            <key>end</key>\n            <string>(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.compound.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.arithmetic.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.compound.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.arithmetic.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>typeof-operator</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.typeof.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=[,);}\\]=&gt;:&amp;|{\\?]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n      </dict>\n      <key>literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#boolean-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#null-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#undefined-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numericConstant-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#array-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#this-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#super-literal</string>\n          </dict>\n        </array>\n      </dict>\n      <key>array-literal</key>\n      <dict>\n        <key>name</key>\n        <string>meta.array.literal.ts</string>\n        <key>begin</key>\n        <string>\\s*(\\[)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>numeric-literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.numeric.hex.ts</string>\n            <key>match</key>\n            <string>\\b(?&lt;!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.numeric.binary.ts</string>\n            <key>match</key>\n            <string>\\b(?&lt;!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.numeric.octal.ts</string>\n            <key>match</key>\n            <string>\\b(?&lt;!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n(?&lt;!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>constant.numeric.decimal.ts</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>7</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>8</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.ts</string>\n              </dict>\n              <key>9</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>10</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.ts</string>\n              </dict>\n              <key>11</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>12</key>\n              <dict>\n                <key>name</key>\n                <string>meta.delimiter.decimal.period.ts</string>\n              </dict>\n              <key>13</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n              <key>14</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.numeric.bigint.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>boolean-literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.language.boolean.true.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.language.boolean.false.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>null-literal</key>\n      <dict>\n        <key>name</key>\n        <string>constant.language.null.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>this-literal</key>\n      <dict>\n        <key>name</key>\n        <string>variable.language.this.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))this\\b(?!\\$)</string>\n      </dict>\n      <key>super-literal</key>\n      <dict>\n        <key>name</key>\n        <string>variable.language.super.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))super\\b(?!\\$)</string>\n      </dict>\n      <key>undefined-literal</key>\n      <dict>\n        <key>name</key>\n        <string>constant.language.undefined.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>numericConstant-literal</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.language.nan.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.language.infinity.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>support-objects</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>variable.language.arguments.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(arguments)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.builtin.ts</string>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array\n  |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.error.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.promise.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Promise)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.function.ts</string>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Math)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.math.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.math.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.property.math.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(console)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.class.console.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.console.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(JSON)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(parse|stringify))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.json.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.json.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.import.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.importmeta.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.new.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.target.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\\())\n  |\n  (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.)) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.dom.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>support.class.dom.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\\()</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>support.constant.dom.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.dom.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.class.node.ts</string>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(process)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.object.process.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.variable.property.process.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.process.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>support.type.object.module.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>support.type.object.module.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.type.object.module.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>support.variable.object.node.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n ) |\n (all|catch|finally|race|reject|resolve|then\n )\n)(?=\\s*\\()</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.event-handler.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.dom.ts</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>support.function.promise.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>identifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#object-identifiers</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(&lt;*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=&gt;)\n  )) |\n  ((async\\s*)?(\n    ((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if =&gt; is on new line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with =&gt; on same line\n(\n  (&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=&gt;                                                                                               # arrow operator\n)\n  ))\n))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.constant.property.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.property.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.other.constant.ts</string>\n            <key>match</key>\n            <string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>variable.other.readwrite.ts</string>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n        </array>\n      </dict>\n      <key>object-identifiers</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>support.class.ts</string>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (\\#?[[:upper:]][_$[:digit:][:upper:]]*) |\n  (\\#?[_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.constant.object.property.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.object.property.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.constant.object.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.object.ts</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>type-annotation</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.type.annotation.ts</string>\n            <key>begin</key>\n            <string>(:)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])((?=$|^|[,);\\}\\]]|//)|(?==[^&gt;])|((?&lt;=[\\}&gt;\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.annotation.ts</string>\n            <key>begin</key>\n            <string>(:)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])((?=[,);\\}\\]]|//)|(?==[^&gt;])|(?=^\\s*$)|((?&lt;=\\S)(?=\\s*$))|((?&lt;=[\\}&gt;\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>parameter-type-annotation</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.type.annotation.ts</string>\n            <key>begin</key>\n            <string>(:)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=[,)])|(?==[^&gt;])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>return-type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.return.type.ts</string>\n            <key>begin</key>\n            <string>(?&lt;=\\))\\s*(:)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])(?=$|^|[{};,]|//)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.return.type.ts</string>\n            <key>begin</key>\n            <string>(?&lt;=\\))\\s*(:)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.annotation.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;![:|&amp;])((?=[{};,]|//|^\\s*$)|((?&lt;=\\S)(?=\\s*$)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>return-type-core</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[:|&amp;])(?=\\s*\\{)</string>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-predicate-operator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>arrow-return-type</key>\n      <dict>\n        <key>name</key>\n        <string>meta.return.type.arrow.ts</string>\n        <key>begin</key>\n        <string>(?&lt;=\\))\\s*(:)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.annotation.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?==&gt;|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#arrow-return-type-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>possibly-arrow-return-type</key>\n      <dict>\n        <key>begin</key>\n        <string>(?&lt;=\\)|^)\\s*(:)(?=\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=&gt;)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>meta.arrow.ts meta.return.type.arrow.ts keyword.operator.type.annotation.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?==&gt;|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))</string>\n        <key>contentName</key>\n        <string>meta.arrow.ts meta.return.type.arrow.ts</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#arrow-return-type-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>arrow-return-type-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;=[:])(?=\\s*\\{)</string>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-predicate-operator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-parameters</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.parameters.ts</string>\n        <key>begin</key>\n        <string>(&lt;)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(&gt;)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.end.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>storage.modifier.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.assignment.ts</string>\n            <key>match</key>\n            <string>(=)(?!&gt;)</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-arguments</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.parameters.ts</string>\n        <key>begin</key>\n        <string>\\&lt;</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\&gt;</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.typeparameters.end.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type-arguments-body</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-arguments-body</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-string</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#numeric-literal</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-primitive</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-builtin-literals</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-tuple</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-object</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-conditional</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-operators</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-fn-type-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-paren-or-function-parameters</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-function-return-type</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-name</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-primitive</key>\n      <dict>\n        <key>name</key>\n        <string>support.type.primitive.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>type-builtin-literals</key>\n      <dict>\n        <key>name</key>\n        <string>support.type.builtin.ts</string>\n        <key>match</key>\n        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n      </dict>\n      <key>type-tuple</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.tuple.ts</string>\n        <key>begin</key>\n        <string>\\[</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\]</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.square.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.rest.ts</string>\n            <key>match</key>\n            <string>\\.\\.\\.</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.label.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.separator.label.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-object</key>\n      <dict>\n        <key>name</key>\n        <string>meta.object.type.ts</string>\n        <key>begin</key>\n        <string>\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.block.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#method-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#indexer-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#indexer-mapped-type-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#field-declaration</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\.\\.\\.</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.spread.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\}|;|,|$)|(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-comma</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#punctuation-semicolon</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-conditional</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(extends)\\s+</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=:)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>\\?</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.ternary.ts</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>:</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.ternary.ts</string>\n                  </dict>\n                </dict>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#type</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>type-paren-or-function-parameters</key>\n      <dict>\n        <key>name</key>\n        <string>meta.type.paren.cover.ts</string>\n        <key>begin</key>\n        <string>\\(</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>meta.brace.round.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(\n  (&lt;) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=&gt;)\n    ))\n  ))\n)) |\n(:\\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((&lt;\\s*$)|((&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;]|\\&lt;\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=&lt;&gt;]|=[^&lt;])*\\&gt;)*\\&gt;)*&gt;\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^&lt;&gt;\\(\\)\\{\\}]|\\&lt;([^&lt;&gt;]|\\&lt;([^&lt;&gt;]|\\&lt;[^&lt;&gt;]+\\&gt;)+\\&gt;)+\\&gt;|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts variable.language.this.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.rest.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts variable.language.this.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-annotation</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>punctuation.separator.parameter.ts</string>\n            <key>match</key>\n            <string>,</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-fn-type-parameters</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(abstract)\\s+)?(new)\\b(?=\\s*\\&lt;)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.type.constructor.ts storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>meta.type.constructor.ts keyword.control.new.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=&gt;)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#comment</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-parameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.constructor.ts</string>\n            <key>begin</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(abstract)\\s+)?(new)\\b\\s*(?=\\()</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.modifier.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.control.new.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#function-parameters</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.function.ts</string>\n            <key>begin</key>\n            <string>(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=&gt;)\n      ))\n    )\n  )\n)</string>\n            <key>end</key>\n            <string>(?&lt;=\\))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#function-parameters</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>type-function-return-type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.type.function.return.ts</string>\n            <key>begin</key>\n            <string>(=&gt;)(?=\\s*\\S)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.function.arrow.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;!=&gt;)(?&lt;![|&amp;])(?=[,\\]\\)\\{\\}=;&gt;:\\?]|//|$)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-function-return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.type.function.return.ts</string>\n            <key>begin</key>\n            <string>=&gt;</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.function.arrow.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;!=&gt;)(?&lt;![|&amp;])((?=[,\\]\\)\\{\\}=;:\\?&gt;]|//|^\\s*$)|((?&lt;=\\S)(?=\\s*$)))</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-function-return-type-core</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>type-function-return-type-core</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#comment</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?&lt;==&gt;)(?=\\s*\\{)</string>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type-predicate-operator</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-operators</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#typeof-operator</string>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>([&amp;|])(?=\\s*\\{)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?&lt;=\\})</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-object</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>[&amp;|]</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\S)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.keyof.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.ternary.ts</string>\n            <key>match</key>\n            <string>(\\?|\\:)</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.infer.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))infer(?=\\s+[_$[:alpha:]])</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.import.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))import(?=\\s*\\()</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-predicate-operator</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.asserts.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts variable.language.this.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.expression.is.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.type.asserts.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts variable.language.this.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.parameter.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.type.asserts.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.expression.is.ts</string>\n            <key>match</key>\n            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\\.\\.\\.)|(?&lt;!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))</string>\n          </dict>\n        </array>\n      </dict>\n      <key>type-name</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(&lt;)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(&gt;)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.type.parameters.ts punctuation.definition.typeparameters.end.ts</string>\n              </dict>\n            </dict>\n            <key>contentName</key>\n            <string>meta.type.parameters.ts</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(&lt;)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(&gt;)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>meta.type.parameters.ts punctuation.definition.typeparameters.end.ts</string>\n              </dict>\n            </dict>\n            <key>contentName</key>\n            <string>meta.type.parameters.ts</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments-body</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.module.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.accessor.optional.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.ts</string>\n            <key>match</key>\n            <string>[_$[:alpha:]][_$[:alnum:]]*</string>\n          </dict>\n        </array>\n      </dict>\n      <key>punctuation-comma</key>\n      <dict>\n        <key>name</key>\n        <string>punctuation.separator.comma.ts</string>\n        <key>match</key>\n        <string>,</string>\n      </dict>\n      <key>punctuation-semicolon</key>\n      <dict>\n        <key>name</key>\n        <string>punctuation.terminator.statement.ts</string>\n        <key>match</key>\n        <string>;</string>\n      </dict>\n      <key>punctuation-accessor</key>\n      <dict>\n        <key>match</key>\n        <string>(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))</string>\n        <key>captures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.accessor.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.accessor.optional.ts</string>\n          </dict>\n        </dict>\n      </dict>\n      <key>string</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#qstring-single</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#qstring-double</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#template</string>\n          </dict>\n        </array>\n      </dict>\n      <key>qstring-double</key>\n      <dict>\n        <key>name</key>\n        <string>string.quoted.double.ts</string>\n        <key>begin</key>\n        <string>\"</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\")|((?:[^\\\\\\n])$)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.end.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.newline.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string-character-escape</string>\n          </dict>\n        </array>\n      </dict>\n      <key>qstring-single</key>\n      <dict>\n        <key>name</key>\n        <string>string.quoted.single.ts</string>\n        <key>begin</key>\n        <string>'</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(\\')|((?:[^\\\\\\n])$)</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.string.end.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.newline.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#string-character-escape</string>\n          </dict>\n        </array>\n      </dict>\n      <key>string-character-escape</key>\n      <dict>\n        <key>name</key>\n        <string>constant.character.escape.ts</string>\n        <key>match</key>\n        <string>\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>\n      </dict>\n      <key>template</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#template-call</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>string.template.ts</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tagged-template.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.template.begin.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>`</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.template.end.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#template-substitution-element</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string-character-escape</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>template-call</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>string.template.ts</string>\n            <key>begin</key>\n            <string>(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))(([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;)*(?&lt;!=)\\&gt;))*(?&lt;!=)\\&gt;)*(?&lt;!=)&gt;\\s*)?`)</string>\n            <key>end</key>\n            <string>(?=`)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>begin</key>\n                <string>(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))</string>\n                <key>end</key>\n                <string>(?=(&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))(([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;)*(?&lt;!=)\\&gt;))*(?&lt;!=)\\&gt;)*(?&lt;!=)&gt;\\s*)?`)</string>\n                <key>patterns</key>\n                <array>\n                  <dict>\n                    <key>include</key>\n                    <string>#support-function-call-identifiers</string>\n                  </dict>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.function.tagged-template.ts</string>\n                    <key>match</key>\n                    <string>([_$[:alpha:]][_$[:alnum:]]*)</string>\n                  </dict>\n                </array>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>string.template.ts</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))(([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;|\\&lt;\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\&lt;\\&gt;\\,\\.\\[]|=&gt;|&amp;(?!&amp;)|\\|(?!\\|)))))([^&lt;&gt;\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?&lt;==)\\&gt;)*(?&lt;!=)\\&gt;))*(?&lt;!=)\\&gt;)*(?&lt;!=)&gt;\\s*)`)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tagged-template.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=`)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#type-arguments</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>template-substitution-element</key>\n      <dict>\n        <key>name</key>\n        <string>meta.template.expression.ts</string>\n        <key>begin</key>\n        <string>\\$\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.template-expression.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.template-expression.end.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#expression</string>\n          </dict>\n        </array>\n        <key>contentName</key>\n        <string>meta.embedded.line.ts</string>\n      </dict>\n      <key>type-string</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#qstring-single</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#qstring-double</string>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#template-type</string>\n          </dict>\n        </array>\n      </dict>\n      <key>template-type</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#template-call</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>string.template.ts</string>\n            <key>begin</key>\n            <string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.function.tagged-template.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.template.begin.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>`</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.template.end.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#template-type-substitution-element</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string-character-escape</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>template-type-substitution-element</key>\n      <dict>\n        <key>name</key>\n        <string>meta.template.expression.ts</string>\n        <key>begin</key>\n        <string>\\$\\{</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.template-expression.begin.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>\\}</string>\n        <key>endCaptures</key>\n        <dict>\n          <key>0</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.template-expression.end.ts</string>\n          </dict>\n        </dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>include</key>\n            <string>#type</string>\n          </dict>\n        </array>\n        <key>contentName</key>\n        <string>meta.embedded.line.ts</string>\n      </dict>\n      <key>regex</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>string.regexp.ts</string>\n            <key>begin</key>\n            <string>(?&lt;!\\+\\+|--|})(?&lt;=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=&gt;|&amp;&amp;|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.begin.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(/)([dgimsuy]*)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.end.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.other.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>string.regexp.ts</string>\n            <key>begin</key>\n            <string>((?&lt;![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?&lt;=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.begin.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(/)([dgimsuy]*)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.end.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.other.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>regexp</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>keyword.control.anchor.regexp</string>\n            <key>match</key>\n            <string>\\\\[bB]|\\^|\\$</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>\\\\[1-9]\\d*|\\\\k&lt;([a-zA-Z_$][\\w$]*)&gt;</string>\n            <key>captures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.other.back-reference.regexp</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.regexp</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.quantifier.regexp</string>\n            <key>match</key>\n            <string>[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>keyword.operator.or.regexp</string>\n            <key>match</key>\n            <string>\\|</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.group.assertion.regexp</string>\n            <key>begin</key>\n            <string>(\\()((\\?=)|(\\?!)|(\\?&lt;=)|(\\?&lt;!))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.assertion.regexp</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.look-ahead.regexp</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.negative-look-ahead.regexp</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.look-behind.regexp</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>meta.assertion.negative-look-behind.regexp</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\))</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.group.regexp</string>\n            <key>begin</key>\n            <string>\\((?:(\\?:)|(?:\\?&lt;([a-zA-Z_$][\\w$]*)&gt;))?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.no-capture.regexp</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.regexp</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.group.regexp</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#regexp</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.other.character-class.set.regexp</string>\n            <key>begin</key>\n            <string>(\\[)(\\^)?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.character-class.regexp</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.negation.regexp</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\])</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.character-class.regexp</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>constant.other.character-class.range.regexp</string>\n                <key>match</key>\n                <string>(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.numeric.regexp</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.control.regexp</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.escape.backslash.regexp</string>\n                  </dict>\n                  <key>4</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.numeric.regexp</string>\n                  </dict>\n                  <key>5</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.control.regexp</string>\n                  </dict>\n                  <key>6</key>\n                  <dict>\n                    <key>name</key>\n                    <string>constant.character.escape.backslash.regexp</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#regex-character-class</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#regex-character-class</string>\n          </dict>\n        </array>\n      </dict>\n      <key>regex-character-class</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.other.character-class.regexp</string>\n            <key>match</key>\n            <string>\\\\[wWsSdDtrnvf]|\\.</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.character.numeric.regexp</string>\n            <key>match</key>\n            <string>\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.character.control.regexp</string>\n            <key>match</key>\n            <string>\\\\c[A-Z]</string>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>constant.character.escape.backslash.regexp</string>\n            <key>match</key>\n            <string>\\\\.</string>\n          </dict>\n        </array>\n      </dict>\n      <key>comment</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>comment.block.documentation.ts</string>\n            <key>begin</key>\n            <string>/\\*\\*(?!/)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\*/</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#docblock</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>comment.block.ts</string>\n            <key>begin</key>\n            <string>(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.internaldeclaration.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.decorator.internaldeclaration.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>\\*/</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.ts</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.whitespace.comment.leading.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>comment.line.double-slash.ts</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.comment.ts</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.internaldeclaration.ts</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.decorator.internaldeclaration.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=$)</string>\n            <key>contentName</key>\n            <string>comment.line.double-slash.ts</string>\n          </dict>\n        </array>\n      </dict>\n      <key>single-line-comment-consuming-line-ending</key>\n      <dict>\n        <key>begin</key>\n        <string>(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.whitespace.comment.leading.ts</string>\n          </dict>\n          <key>2</key>\n          <dict>\n            <key>name</key>\n            <string>comment.line.double-slash.ts</string>\n          </dict>\n          <key>3</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.comment.ts</string>\n          </dict>\n          <key>4</key>\n          <dict>\n            <key>name</key>\n            <string>storage.type.internaldeclaration.ts</string>\n          </dict>\n          <key>5</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.decorator.internaldeclaration.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=^)</string>\n        <key>contentName</key>\n        <string>comment.line.double-slash.ts</string>\n      </dict>\n      <key>directives</key>\n      <dict>\n        <key>name</key>\n        <string>comment.line.triple-slash.directive.ts</string>\n        <key>begin</key>\n        <string>^(///)\\s*(?=&lt;(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/&gt;\\s*$)</string>\n        <key>beginCaptures</key>\n        <dict>\n          <key>1</key>\n          <dict>\n            <key>name</key>\n            <string>punctuation.definition.comment.ts</string>\n          </dict>\n        </dict>\n        <key>end</key>\n        <string>(?=$)</string>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>meta.tag.ts</string>\n            <key>begin</key>\n            <string>(&lt;)(reference|amd-dependency|amd-module)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.tag.directive.ts</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.tag.directive.ts</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>/&gt;</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.tag.directive.ts</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>name</key>\n                <string>entity.other.attribute-name.directive.ts</string>\n                <key>match</key>\n                <string>path|types|no-default-lib|lib|name</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.assignment.ts</string>\n                <key>match</key>\n                <string>=</string>\n              </dict>\n              <dict>\n                <key>include</key>\n                <string>#string</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>docblock</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>constant.language.access-type.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)author)\n\\s+\n(\n  [^@\\s&lt;&gt;*/]\n  (?:[^@&lt;&gt;*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (&lt;)\n  ([^&gt;\\s]+)\n  (&gt;)\n)?</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.angle.begin.jsdoc</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>constant.other.email.link.underline.jsdoc</string>\n              </dict>\n              <key>6</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.angle.end.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # &lt;that namepath&gt;\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # &lt;this namepath&gt;</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>keyword.operator.control.jsdoc</string>\n              </dict>\n              <key>5</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>meta.example.jsdoc</string>\n            <key>begin</key>\n            <string>((@)example)\\s+</string>\n            <key>end</key>\n            <string>(?=@|\\*/)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>match</key>\n                <string>^\\s\\*\\s+</string>\n              </dict>\n              <dict>\n                <key>contentName</key>\n                <string>constant.other.description.jsdoc</string>\n                <key>begin</key>\n                <string>\\G(&lt;)caption(&gt;)</string>\n                <key>beginCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.tag.inline.jsdoc</string>\n                  </dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.begin.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.end.jsdoc</string>\n                  </dict>\n                </dict>\n                <key>end</key>\n                <string>(&lt;/)caption(&gt;)|(?=\\*/)</string>\n                <key>endCaptures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>entity.name.tag.inline.jsdoc</string>\n                  </dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.begin.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.bracket.angle.end.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>[^\\s@*](?:[^*]|\\*[^/])*</string>\n                <key>captures</key>\n                <dict>\n                  <key>0</key>\n                  <dict>\n                    <key>name</key>\n                    <string>source.embedded.ts</string>\n                  </dict>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>constant.language.symbol-type.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.link.underline.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>((@)typedef)\\s+(?={)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsdoctype</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n                <key>match</key>\n                <string>(?:[^@\\s*/]|\\*[^/])+</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsdoctype</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n                <key>match</key>\n                <string>([A-Za-z_$][\\w$.\\[\\]]*)</string>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n                <key>match</key>\n                <string>(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?&gt;\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.optional-value.begin.bracket.square.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>keyword.operator.assignment.jsdoc</string>\n                  </dict>\n                  <key>3</key>\n                  <dict>\n                    <key>name</key>\n                    <string>source.embedded.ts</string>\n                  </dict>\n                  <key>4</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.definition.optional-value.end.bracket.square.jsdoc</string>\n                  </dict>\n                  <key>5</key>\n                  <dict>\n                    <key>name</key>\n                    <string>invalid.illegal.syntax.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#jsdoctype</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>contentName</key>\n            <string>variable.other.jsdoc</string>\n            <key>begin</key>\n            <string>((@)(?:default(?:value)?|license|version))\\s+(([''\"]))</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n              <key>4</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.begin.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>(\\3)|(?=$|\\*/)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.string.end.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>variable.other.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>storage.type.class.jsdoc</string>\n            <key>match</key>\n            <string>(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>include</key>\n            <string>#inline-tags</string>\n          </dict>\n          <dict>\n            <key>match</key>\n            <string>((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.block.tag.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n        </array>\n      </dict>\n      <key>brackets</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>begin</key>\n            <string>{</string>\n            <key>end</key>\n            <string>}|(?=\\*/)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#brackets</string>\n              </dict>\n            </array>\n          </dict>\n          <dict>\n            <key>begin</key>\n            <string>\\[</string>\n            <key>end</key>\n            <string>\\]|(?=\\*/)</string>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#brackets</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>inline-tags</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>constant.other.description.jsdoc</string>\n            <key>match</key>\n            <string>(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))</string>\n            <key>captures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.square.begin.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.square.end.jsdoc</string>\n              </dict>\n            </dict>\n          </dict>\n          <dict>\n            <key>name</key>\n            <string>entity.name.type.instance.jsdoc</string>\n            <key>begin</key>\n            <string>({)((@)(?:link(?:code|plain)?|tutorial))\\s*</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.begin.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>storage.type.class.jsdoc</string>\n              </dict>\n              <key>3</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.inline.tag.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>}|(?=\\*/)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.end.jsdoc</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>match</key>\n                <string>\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>variable.other.link.underline.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.separator.pipe.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n              <dict>\n                <key>match</key>\n                <string>\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?</string>\n                <key>captures</key>\n                <dict>\n                  <key>1</key>\n                  <dict>\n                    <key>name</key>\n                    <string>variable.other.description.jsdoc</string>\n                  </dict>\n                  <key>2</key>\n                  <dict>\n                    <key>name</key>\n                    <string>punctuation.separator.pipe.jsdoc</string>\n                  </dict>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n      <key>jsdoctype</key>\n      <dict>\n        <key>patterns</key>\n        <array>\n          <dict>\n            <key>name</key>\n            <string>invalid.illegal.type.jsdoc</string>\n            <key>match</key>\n            <string>\\G{(?:[^}*]|\\*[^/}])+$</string>\n          </dict>\n          <dict>\n            <key>contentName</key>\n            <string>entity.name.type.instance.jsdoc</string>\n            <key>begin</key>\n            <string>\\G({)</string>\n            <key>beginCaptures</key>\n            <dict>\n              <key>0</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.begin.jsdoc</string>\n              </dict>\n            </dict>\n            <key>end</key>\n            <string>((}))\\s*|(?=\\*/)</string>\n            <key>endCaptures</key>\n            <dict>\n              <key>1</key>\n              <dict>\n                <key>name</key>\n                <string>entity.name.type.instance.jsdoc</string>\n              </dict>\n              <key>2</key>\n              <dict>\n                <key>name</key>\n                <string>punctuation.definition.bracket.curly.end.jsdoc</string>\n              </dict>\n            </dict>\n            <key>patterns</key>\n            <array>\n              <dict>\n                <key>include</key>\n                <string>#brackets</string>\n              </dict>\n            </array>\n          </dict>\n        </array>\n      </dict>\n    </dict>\n  </dict>\n</plist>\n"
